import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;

/** Class used to hold a scene with all of the information needed for the program to run
 * @author Jared Moore
 * @version 11/2/12
 * In order to help learn course concepts, I used online materials to help me grasp concepts that I was not sure how to do
 */
public class Scene extends JLayeredPane implements Serializable {

	private ImageIcon image;
	private Door door1 = new Door(true), door2 = new Door(false);
	private int currentScene = 1;
	public static final int NUM_OF_SCENES = 3;
	private JLabel background, icon;
	private ArrayList<Item> items;
	private NewObjectOutputStream output;
	private NewObjectInputStream input;
	private MouseClick listener = new MouseClick();
	private KeyType key = new KeyType();
	private Scene object;
	
	/** No-parameter constructor
	 * Needed (I think) in order for the serialization process to work
	 * Calls the other constructor with a default value
	 */
	public Scene() {
		this(new ImageIcon("res/room1"));
	}
	
	/** Constructor for Scene
	 * Sets up the JPanel with the starting value for everything
	 * @param img The image that will be used as the first scene
	 */
	public Scene(ImageIcon img) {
		
		items = new ArrayList<Item>();
		items.add(new Item(new ImageIcon("res/chainsaw.jpg"), "Chainsaw", "Electric or gas-powered tool used for cutting down trees")); 
		items.add(new Item(new ImageIcon("res/ax.png"), "Ax", "Manual tool used to cut wood"));
		items.add(new Item(new ImageIcon("res/lamp.jpg"), "Lamp", "Appliance used to create light"));
		
		setFocusable(true);
		requestFocusInWindow(); // in order to handle key events
		addKeyListener(key);
			
		setLayout(new BorderLayout());
		
		door1.addMouseListener(listener);
		door2.addMouseListener(listener);
		add(door1,BorderLayout.WEST, DEFAULT_LAYER);
		add(door2,BorderLayout.EAST, DEFAULT_LAYER);
		
		image = img;
		background = new JLabel(image);
		background.setBounds(0, 0, image.getIconWidth(), image.getIconHeight());
		add(background, Integer.MIN_VALUE);
		setOpaque(false); 
		
		Dimension panelSize = new Dimension(image.getIconWidth(), image.getIconHeight());
		setPreferredSize(panelSize);
		setMaximumSize(panelSize);
		setMinimumSize(panelSize); // so there is no awkward white space
		
		icon = new JLabel(items.get(0).getIcon());
		icon.addMouseListener(listener);
		add(icon, BorderLayout.CENTER, DEFAULT_LAYER);
	}
	
	/** Loads a .ser file with the data from a previously saved game 
	 * @param didUserSave To tell if it is an automatically saved game, or a user-defined one
	 */
	protected void load(boolean didUserSave) {
		
		try {
			if (didUserSave)
				input = new NewObjectInputStream(new FileInputStream("data.ser"));
			else
				input = new NewObjectInputStream(new FileInputStream("auto.ser"));
			Scene scene = (Scene) input.readObject();
			scene.setImage(new ImageIcon("res/room" + Integer.toString(currentScene) + ".jpg"));
			object = scene;
			HW8Main frame = new HW8Main(object);
			frame.main(null);		
		} catch (IOException e) { // will appear if is pressed at the begginning, but the program will continue 
			System.err.println("Error opening file.  Check if file exists");
		} catch (ClassNotFoundException e) {
			System.err.println("Classes do not match.  You are not using a file generated by this program");
			System.exit(1);
		}
	}
	
	/** Save the game at the current point with all of the data that is currently being used
	 * @param didUserSave To tell if it is an automatically saved game, or a user-defined one
	 */
	protected void save(boolean didUserSave) {
		
		try {
			if (didUserSave)
				output = new NewObjectOutputStream(new FileOutputStream("data.ser"));
			else
				output = new NewObjectOutputStream(new FileOutputStream("auto.ser"));
			output.writeObject(this);			
			
		} catch (IOException e) {
			System.err.println("Error opening/writing to file, may not have write permission in current directory");
			e.printStackTrace(); // so you can see what went wrong
			System.exit(1);
		}
		
	}
	
	/** Advance the scene to the desired one
	 * @param current The scene to be used
	 */
	private void advanceScene(int current) {
		
		image = new ImageIcon("res/room" + Integer.toString(currentScene) + ".jpg");
		background.setIcon(image);
		
		if (items.get(currentScene - 1) != null) {
			icon.setIcon(items.get(currentScene - 1).getIcon());
			add(icon, BorderLayout.CENTER, DEFAULT_LAYER);
		}
		else
			remove(icon);
		repaint();
	}

	/** Class to handle any clicks that occur in the panel
	 * @author Jared Moore
	 * @version 11/2/12 
	 */
	private class MouseClick extends MouseAdapter implements Serializable {
		
		/** Perform the proper action when the mouse is clicked
		 * @param e The event that was generated
		 */
		@Override
		public void mouseClicked(MouseEvent e) {
			
			if (e.getSource() == door1) {
				if (currentScene == NUM_OF_SCENES) // rotate through the scenes
					currentScene = 1;
				else
					currentScene++;
				advanceScene(currentScene);
			}
			
			else if (e.getSource() == door2) {
				if (currentScene == 1)
					currentScene = NUM_OF_SCENES;
				else 
					currentScene--;
				advanceScene(currentScene);
			}
			else if (e.getSource() == icon) {
				for (int i = 0; i < items.size(); i++) {
					if ((items.get(i) != null) && (items.get(i).getIcon().equals(icon.getIcon()))) {
						try {
							door1.addItem(items.get(i));
							items.set(i, null);
							remove(icon);
							repaint();
							save(false); // this will update the inventory ~ 1 out of 3 times.  This should not happen in programming, but it does.
							load(false); // otherwise, the inventory will not update until a door is clicked
						} catch (Exception e1) { // win condition
							items.set(i, null);
							remove(icon);
							repaint();
							save(false);
							load(false);
							JOptionPane.showMessageDialog(null, "YOU WIN!!!");
						}
					}
				}
			} // end else if 
		}
	}
	
	/** Class to handle key events when they are generated by the panel
	 * @author Jared Moore
	 * @version 11/2/12
	 */
	private class KeyType extends KeyAdapter implements Serializable {
		
		/** Save or load the game if 'l' or 's' is typed
		 * @param e The key event that was generated
		 */
		@Override
		public void keyTyped(KeyEvent e) {
			
			if (e.getKeyChar() == 's') {
				save(true);
			}
			else if (e.getKeyChar() == 'l')
				load(true);
		}
	}	

	/** Getter for Object
	 * @return the object
	 */
	public Scene getObject() {
		return object;
	}

	/** Setter for image
	 * @param image the image to set
	 */
	public void setImage(ImageIcon image) {
		this.image = image;
	}

}
